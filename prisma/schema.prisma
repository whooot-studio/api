// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  members        Member[]
  invitations    Invitation[]
  quizzes        Quiz[]
  games          Game[]
  participations GameParticipant[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  activeOrganizationId String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id          String       @id
  name        String
  slug        String?
  logo        String?
  createdAt   DateTime
  metadata    String?
  members     Member[]
  invitations Invitation[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model Quiz {
  id          String     @id @default(cuid())
  title       String
  description String?
  image       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  questions   Question[]
  users       User[]
  games       Game[]

  @@map("quiz")
}

model Question {
  id        String       @id @default(cuid())
  quizId    String
  quiz      Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  title     String
  type      String
  choices   String[]
  answer    String
  points    Int          @default(0)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  answers   GameAnswer[]

  @@map("question")
}

model Game {
  id String @id @default(cuid())

  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  hostId String
  host   User   @relation(fields: [hostId], references: [id], onDelete: Cascade)

  startedAt DateTime?
  endedAt   DateTime?
  status    String    @default("idle") // idle, started, ended

  answers      GameAnswer[]
  participants GameParticipant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("game")
}

model GameParticipant {
  id     String @id @default(cuid())
  gameId String
  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)

  username String
  image    String?

  userId  String?
  user    User?        @relation(fields: [userId], references: [id])
  answers GameAnswer[]

  @@map("game_participant")
}

model GameAnswer {
  id String @id @default(cuid())

  gameId String
  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)

  playerId String
  player   GameParticipant @relation(fields: [playerId], references: [id], onDelete: Cascade)

  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  answer String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([playerId, questionId])
  @@map("game_answer")
}
